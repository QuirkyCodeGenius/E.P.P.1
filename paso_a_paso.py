# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'paso_a_paso.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import RPi.GPIO as GPIO
import time

# Definir los pines GPIO
IN1 = 23#11
IN2 = 22#10
IN3 = 27#9
IN4 = 17#8

Steps = 0
Direction = 0
number_steps = 512  # = 2048/4

# Configurar los pines GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(531, 400)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(180, 30, 181, 21))
        self.label.setObjectName("label")
        self.valor = QtWidgets.QTextEdit(Dialog)
        self.valor.setGeometry(QtCore.QRect(90, 110, 111, 41))
        self.valor.setObjectName("valor")
        self.bejecutar = QtWidgets.QPushButton(Dialog)
        self.bejecutar.setGeometry(QtCore.QRect(280, 110, 111, 41))
        self.bejecutar.setObjectName("bejecutar")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:700;\">motor paso a paso</span></p></body></html>"))
        self.bejecutar.setText(_translate("Dialog", "ejecutar"))
    def ejecutar (self):
        
        # Obtener la cantidad de vueltas deseada del usuario
        turns = float(self.valor.toPlainText())
        #turns = float(0.5)    
        # Realizar el giro del motor
        rotate_motor(turns)
        time.sleep(2)  # Esperar un segundo antes de la siguiente acción

    # Función para el motor paso a paso
def stepper(nbStep):
        global Steps
        global Direction
        
        if nbStep >= 0:
            Direction = 1
        else:
            Direction = 0
            nbStep = -nbStep
            
        for x in range(int(nbStep * 8)):
            if Steps == 0:
                GPIO.output(IN1, GPIO.LOW)
                GPIO.output(IN2, GPIO.LOW)
                GPIO.output(IN3, GPIO.LOW)
                GPIO.output(IN4, GPIO.HIGH)
            elif Steps == 1:
                GPIO.output(IN1, GPIO.LOW)
                GPIO.output(IN2, GPIO.LOW)
                GPIO.output(IN3, GPIO.HIGH)
                GPIO.output(IN4, GPIO.HIGH)
            elif Steps == 2:
                GPIO.output(IN1, GPIO.LOW)
                GPIO.output(IN2, GPIO.LOW)
                GPIO.output(IN3, GPIO.HIGH)
                GPIO.output(IN4, GPIO.LOW)
            elif Steps == 3:
                GPIO.output(IN1, GPIO.LOW)
                GPIO.output(IN2, GPIO.HIGH)
                GPIO.output(IN3, GPIO.HIGH)
                GPIO.output(IN4, GPIO.LOW)
            elif Steps == 4:
                GPIO.output(IN1, GPIO.LOW)
                GPIO.output(IN2, GPIO.HIGH)
                GPIO.output(IN3, GPIO.LOW)
                GPIO.output(IN4, GPIO.LOW)
            elif Steps == 5:
                GPIO.output(IN1, GPIO.HIGH)
                GPIO.output(IN2, GPIO.HIGH)
                GPIO.output(IN3, GPIO.LOW)
                GPIO.output(IN4, GPIO.LOW)
            elif Steps == 6:
                GPIO.output(IN1, GPIO.HIGH)
                GPIO.output(IN2, GPIO.LOW)
                GPIO.output(IN3, GPIO.LOW)
                GPIO.output(IN4, GPIO.LOW)
            elif Steps == 7:
                GPIO.output(IN1, GPIO.HIGH)
                GPIO.output(IN2, GPIO.LOW)
                GPIO.output(IN3, GPIO.LOW)
                GPIO.output(IN4, GPIO.HIGH)
            else:
                GPIO.output(IN1, GPIO.LOW)
                GPIO.output(IN2, GPIO.LOW)
                GPIO.output(IN3, GPIO.LOW)
                GPIO.output(IN4, GPIO.LOW)
            
            time.sleep(0.001)
            
            if Direction == 1:
                Steps += 1
            if Direction == 0:
                Steps -= 1
            if Steps > 7:
                Steps = 0
            if Steps < 0:
                Steps = 7
def rotate_motor(turns):
        global number_steps
        
        # Calcular el número de pasos necesarios para las vueltas especificadas
        steps_for_turns = int(number_steps * turns)
        
        # Girar el motor
        stepper(steps_for_turns)

    
    
                

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    ui.bejecutar.clicked.connect(ui.ejecutar)
    Dialog.show()
    sys.exit(app.exec_())
